1.public class LengthOfPalindrome {
	public int longestPalindrome(String s){
	int left,right = s.length()-1,max = 1,temp_max,indexleft,indexright;
	while(right>=0){
		left = right - 1;
		temp_max = 0;
		indexleft = left;
		indexright = right;
		while(indexright<s.length()&&indexleft>=0){
			
			if(s.charAt(indexleft)==s.charAt(indexright)){
				--indexleft;
				++indexright;
				temp_max+=2;	
			}else{
				break;
			}			
		}
		if(temp_max>max)
			max = temp_max;
		left = right - 2;
		temp_max = 1;
		indexleft = left;
		indexright = right;
		while(indexright<s.length()&&indexleft>=0){
			
			if(s.charAt(indexleft)==s.charAt(indexright))
			{
				--indexleft;
				++indexright;
				temp_max=temp_max+2;	
			}else
			{
				break;
			}			
		}
			if(temp_max>max)
			max = temp_max;
			--right;	
		}
	return max;
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		LengthOfPalindrome lp= new LengthOfPalindrome();
		System.out.println(lp.longestPalindrome("asddsa"));
	}
}

-----------------------------------------------------------------------------------------------------
2.
import java.util.ArrayList;

public class MaxPro {
	public int maxProfit(int[] prices) {
		int maximum = 0;
		ArrayList<Integer> amount = new ArrayList<>();
		for (int count = 0; count < prices.length; count++)
			amount.add(prices[count]);
		int count = 0;
		while (count < (amount.size() - 1)) {
			while (count < amount.size() - 1 && amount.get(count + 1) <= amount.get(count))
				++count;
			if (count >= amount.size())
				break;
			maximum = maximum-amount.get(count++);
			while (count < amount.size() && amount.get(count) >= amount.get(count - 1))
				++count;
			maximum = maximum+amount.get(count - 1);
		}
		return maximum;
	}
public static void main(String args[]) {
	MaxPro mp = new MaxPro();
	System.out.println(mp.maxProfit(new int[] { 2,9,5,4,8,6,3 }));
        }
}
-------------------------------------------------------------------------------------------------
3.
public class ExcelSheet {
	public int titleToNumber(String title) {
	    int res = 0;
	    int i = title.length()-1;
	    int j = 0;
	    if(title.length() == 0||title==null){
	        throw new IllegalArgumentException("Not valid...");
	    }
	    while(i >= 0){
	        char curr = title.charAt(i);
	        res = res + (int) Math.pow(26,j) * (curr-'A'+1);
	        j++;
	        i--;
	    }
	   return res;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
         ExcelSheet Exec = new ExcelSheet();
         System.out.println(Exec.titleToNumber("Z"));
	}
}

-----------------------------------------------------------------------------------------------------------
BONUS: with O[N] time

import java.util.HashMap;
import java.util.Map;

public class CountSumPairs {
	public static int twoSum(int[] nums, int target) {
		Map<Integer, Integer> combination = new HashMap<>();
		int count = 0;
		for (int k = 0; k < nums.length; k++) {
			if (combination.containsKey(nums[k])) {
				count++;
			} else {
				combination.put(target - nums[k], k);
			}
		}
		return count;
	}
	public static void main(String[] args) {
		int[] nums = {1,5,2,4,3,6};
		int target = 7;
		System.out.println(twoSum(nums, target));
		}
}
